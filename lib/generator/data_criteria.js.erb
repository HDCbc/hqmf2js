// Measure variables
<%- if measure_period -%>
var MeasurePeriod = {
  "low": <%= js_for_value(measure_period.low) %>,
  "high": <%= js_for_value(measure_period.high) %>
}
hqmfjs.MeasurePeriod = function(patient) {
  return [new hQuery.CodedEntry(
    {
      "start_time": MeasurePeriod.low.asDate().getTime()/1000,
      "end_time": MeasurePeriod.high.asDate().getTime()/1000,
      "codes": {}
    }
  )];
}
<%- end -%>
<%- all_criteria.select {|c| c.type == :variable}.each do |criteria| -%>
var <%=  js_name(criteria) %> = <%= js_for_value(criteria.value) %>;
<%- end -%>

// Data critera
<%- all_criteria.select {|c| c.type != :variable}.each do |criteria| -%>
hqmfjs.<%= js_name(criteria) %> = function(patient) {
  <%- if criteria.type == :characteristic and !criteria.property.nil? -%>
  var value = patient.<%= criteria.property %>(<%= js_for_date_bound(criteria) if criteria.property == :age %>);
    <%- if criteria.property == :birthtime -%>
  var events = [value];
      <%- if criteria.temporal_references -%>
        <%- criteria.temporal_references.each do |temporal_reference| -%>
  events = <%= temporal_reference.type %>(events, hqmfjs.<%= temporal_reference.reference.id %>(patient)<%= ", #{js_for_bounds(temporal_reference.range)}" if temporal_reference.range %>);
        <%- end -%>
      <%- end -%>
  return events;
    <%- else -%>
  return matchingValue(value, <%= js_for_bounds(criteria.value) %>);
    <%- end -%>
  <%- else -%>
  <%- if criteria.type != :derived -%>
  var events = patient.<%= patient_api_method(criteria) %>();
  <%- if criteria.status -%>
  events = events.withStatuses(["<%= criteria.status %>"]<%= ", false" if criteria.hard_status %>);
  <%- end -%>
  <%- if criteria.negation -%>
  events = events.withNegation(<%= "getCodes(\"#{criteria.negation_code_list_id}\")" if criteria.negation_code_list_id %>);
  <%- else -%>
  events = events.withoutNegation();
  <%- end -%>
  var codes = <%= js_for_code_list(criteria) %>;
  var start = null;
  var end = null;
    <%- if criteria.effective_time -%>
  <%- startExp = js_for_value(criteria.effective_time.low) -%>
  start = <%= startExp %><%= '.asDate()' if startExp != 'null' %>;
  <%- endExp = js_for_value(criteria.effective_time.high) -%>
  end = <%= endExp %><%= '.asDate()' if endExp != 'null' %>;
    <%- end -%>
  events = events.match(codes, start, end, true);
  <%- else # derived criteria -%>
  var events = <%= criteria.derivation_operator %>(
    <%- criteria.children_criteria.each_with_index do |child, index| -%>
    <%= "hqmfjs.#{child}(patient)" %><%= "," if index<criteria.children_criteria.length-1 %>
    <%- end -%>
  );
  <%- end -%>
  <%- if criteria.value -%>
  events = filterEventsByValue(events, <%= js_for_bounds(criteria.value) %>);
  <%- end -%>
  <%- if criteria.temporal_references -%>
  <%- criteria.temporal_references.each do |temporal_reference| -%>
  events = <%= temporal_reference.type %>(events, hqmfjs.<%= temporal_reference.reference.id %>(patient)<%= ", #{js_for_bounds(temporal_reference.range)}" if temporal_reference.range %>);
  <%- end -%>
  <%- end -%>
  <%- if criteria.subset_operators -%>
  <%- criteria.subset_operators.select {|subset_operator| subset_operator.type}.each do |subset_operator| -%>
  events = <%= subset_operator.type %>(events<%= ", #{js_for_bounds(subset_operator.value)}" if subset_operator.value %>);
  <%- end # each operator -%>
  <%- end # subset operators -%>
  return events;
  <%- end -%>
}

<%- end -%>